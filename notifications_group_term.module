<?php

/**
 * @file
 * Defines a Notifications subscription type for taxonomy term used in OG group.
 * 
 * The subscription type defined here reuses some of the functionality from
 * notifications_tags and og_notifications (as well as cut-and-paste of code
 * from same). Originally, I tried to reuse 'subscription fields' defined in
 * those two modules but now think this is not possible.
 * 
 * This module was developed with:
 *  - notifications-6.x-4.0-beta7
 *  - og-6.x-2.1
 * 
 * Built using lessons learnt from implementing notifications_vocabulary_1 and
 * _2. Like thse modules, this one does not define any permissions to control
 * access.
 * 
 * @todo Control where subscription links appear. Checking for the subscription
 * type being enabled is not enough.
 * 
 * @todo Whether previous todo is done or not, put comment to this effect in
 * code so that developer audience knows this is necessary.
 * 
 * @todo Be consistent in terms of what groups are available in the user-
 * specific add-subscription page and the subscription links. i.e. Can users
 * subscribe to content in groups of which they are not a member or not?
 */

/**
 * Implementation of hook_notifications.
 *
 * Defines a vocabulary subscription type and its single field, also called
 * vocabulary.
 */
function notifications_group_term_notifications($op, &$arg0 = NULL, $arg1 = NULL, $arg2 = NULL) {

  switch ($op) {

    // This op gives the programmer the chance to define one or more
    // subscription types. A subscription type defines the conditions under
    // which a user will receive a notification. It relies on an event type
    // and one or more fields (see below).
    case 'subscription types' :
    
      $types['group-term'] = array(

        // This subscription type will create a notifications of 'node' events.
        // Point of interest: Three 'node' events (insert, update, comment) are
        // defined in the notifications_content module, in the 'event types' op
        // of the hook_notifications implementation.
        'event_type' => 'node',
        
        // This subscription type will be presented to the user as 'Group term'
        // (at least in English).
        'title' => t('Group term'),
        
        // This module defines two subscription fields.
        // See the 'subscription fields' op below for a description of what a
        // subscription field is.
        'fields' => array('group-term-group', 'group-term-term'),
        
        // Where appropriate, a user will see this description of the 'Group
        // term' subcription type (at least in English).
        'description' => t('Subscribe to all content, within a given group, tagged with a given term.'),
      );

      return $types;

    break;
    
    // This op gives the programmer the chance to define one or more
    // subscription fields. A subscription field defines a property that marks
    // a piece of content as suitable for triggering notifications for a given
    // subscription.
    case 'subscription fields' :

      // Include this file in order to access notifications_node_nid2title()
      notifications_include( 'node.inc' );
      
      // For a more detailed description of various subscription fields keys,
      // see same section of notifications_vocabulary_1 or _2
      
      // This field is mostly cut and paste from the 'group' field in
      // og_notifications.
      $fields['group-term-group'] = array(
        'name' => t('OG group'),
        'field' => 'group-term-group',
        'type' => 'int',
        'options callback' => '_notification_group_term_group_options',
        'format callback' => 'notifications_node_nid2title'
      );
      
      // This field is more or less cut-and-paste from the 'tid' field in
      // notifications_tags. It reuses the 'term' object type which is also
      // defined in that module.
      $fields['group-term-term'] = array(
        'name' => t('Taxonomy term'),
        'field' => 'group-term-term',
        'type' => 'int',
        'object_type' => 'term',
      );

      return $fields;
    
    break;
  }
}

/**
 * Get available groups to present to user when creating a new subscription.
 * 
 * Wraps a function in og_notifications intended for the same purpose but adds
 * code explain why no groups might be available.
 * 
 * @return
 *   An array of groups ( nid => name )
 */
function _notification_group_term_group_options() {
  
  $options = og_notifications_groups();
  
  if ( empty( $options ) ) {
    $options[-1] = t( 'You do not belong to any groups!' );
  }

  return $options;
}

/**
 * Implementation of hook_notifications_object_node()
 */
function notifications_group_term_notifications_object_node($op, $node, $account = NULL) {

  switch ($op) {
    
    // This op is called whenever an event, of an event type known to the
    // notifications system, occurs. Our module gets the chance to extract data
    // from the relevant content, which the notifications system can compare to
    // subscriptions in order to determine whether to trigger a notification.
    case 'conditions':

      $conditions = array();
      
      $groups = _notifications_group_term_group_ids_from_node( $node );
      if ( $groups ) {
        $conditions['group-term-group'] = $groups;
      }
      
      $terms = _notifications_group_term_term_ids_from_node( $node );
      if ( $terms ) {
        $conditions['group-term-term'] = $terms;
      }
      
      //dsm( $node );
      //dsm( $conditions );
      //dsm( og_get_group_context() );
      
      return $conditions;

    break;

    // This op is called in order to present the user with a set of subscription
    // (and unsubscription) links relevant to the content that they are viewing.
    // As we have multiple fields in this subscription, there is the potential
    // for a lot of options if cross-group posting is permitted!
    case 'subscriptions':
    
      $options = array();
      if ( notifications_subscription_type_enabled('group-term') ) {
    
        $groups = array();
        $group_ids = _notifications_group_term_group_ids_from_node( $node, $groups );
        if ( empty( $groups ) ) {
          break;
        }
        
        $terms = array();
        $term_ids = _notifications_group_term_term_ids_from_node( $node, $terms );
        if ( empty( $terms ) ) {
          break;
        }
        
        foreach ( $terms as $term ) {
          foreach ( $groups as $group ) {

            $options[] = array(
              
              // The text of the link to be shown to the user
              'name' => t('Posts tagged with "@term" in the "@group" group',
                array('@term' => $term->name, '@group' => $group->title ) ),
              
              // The relevant subscription type. (The notifications system will
              // create a subscription of this type in response to a click on the
              // link.)
              'type' => 'group-term',
              
              // The relevant subscription fields (only one in our case) and the
              // value for each field to be used to create the subscription.
              'fields' => array(
                'group-term-group' => $group->nid,
                'group-term-term' => $term->tid,
              ),
            );
          }
        }
      }
      return $options;
      
    break;
  }
}

/**
 * Gets the group node IDs of any group context of a node.
 * 
 * @param $node
 *   A node object
 * @param $group_nodes
 *   Output - If this is an array then relevant group objects will be added.
 * 
 * @return
 *   An array, either empty or containing group node IDs ( nid => nid ).
 */
function _notifications_group_term_group_ids_from_node( $node, &$group_nodes=NULL ) {
 
  // Does the node have no taxonomy terms associated with it?
  if ( ! isset( $node->og_groups )
       ||  ! is_array( $node->og_groups )
       ||  empty( $node->og_groups ) ) {
    return array();
  }
  
  $result = array();
  
  foreach ( $node->og_groups as $group ) {

    if ( is_object( $group ) ) {
      $result[$group->nid] = $group->nid;
      if ( is_array( $group_nodes ) ) {
        $group_nodes[] = $group;
      }
    } else {
      $result[$group] = $group;
      if ( is_array( $group_nodes ) ) {
        $group_nodes[] = node_load( $group );
      }
    }
    
  }
  
  if ( empty( $result ) ) {
    $group_context = og_get_group_context();
    if ( $group_context ) {
      $result[$group_context->nid] = $group_context->nid;
    }
  }
  
  return $result;
}

/**
 * Gets the term IDs of any taxonomy terms associated with a node.
 * 
 * @param $node
 *   A node object
 * @param $terms
 *   Output - If this is an array then relevant term objects will be added.
 *
 * @return
 *   An array, either empty or containing term IDs ( tid => tid ).
 */
function _notifications_group_term_term_ids_from_node( $node, &$terms=NULL ) {
 
  // Does the node have no taxonomy terms associated with it?
  if ( ! isset( $node->taxonomy )
       ||  ! is_array( $node->taxonomy )
       ||  empty( $node->taxonomy ) ) {
    return array();
  }
  
  $result = array();
  
  foreach ( $node->taxonomy as $term ) {

    if ( is_object( $term ) ) {
      $result[$term->tid] = $term->tid;
      if ( is_array( $terms ) ) {
        $terms[] = $term;
      }
    } else {
      $result[$term] = $term;
      if ( is_array( $terms ) ) {
        $terms[] = taxonomy_get_term( $term );
      }
    }
    
  }
  
  return $result;
}
